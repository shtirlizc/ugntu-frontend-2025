// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, JavaScript –∞–∫—Ç–∏–≤–µ–Ω!');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    initButtonEvents();
    initFormValidation();
    initAnimationDemo();
    initTodoList();
    initModal();
});

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ==========

function initButtonEvents() {
    const colorBtn = document.getElementById('colorBtn');
    const textBtn = document.getElementById('textBtn');
    const hideBtn = document.getElementById('hideBtn');
    const demoText = document.getElementById('demoText');
    
    // –ú–∞—Å—Å–∏–≤ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã
    const colors = [
        '#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', 
        '#ff9ff3', '#54a0ff', '#5f27cd', '#00d2d3', '#ff9f43'
    ];
    let colorIndex = 0;
    
    // –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
    colorBtn.addEventListener('click', function() {
        colorIndex = (colorIndex + 1) % colors.length;
        demoText.style.backgroundColor = colors[colorIndex];
        demoText.style.color = '#fff';
        demoText.classList.add('color-change');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ 500–º—Å
        setTimeout(() => {
            demoText.classList.remove('color-change');
        }, 500);
        
        console.log('–¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', colors[colorIndex]);
    });
    
    // –°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    const textVariants = [
        '–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤—ã—à–µ',
        'JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üéâ',
        '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ HTML, CSS –∏ JS –≤ –¥–µ–π—Å—Ç–≤–∏–∏',
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏!',
        '–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - —ç—Ç–æ –≤–µ—Å–µ–ª–æ! üíª'
    ];
    let textIndex = 0;
    
    textBtn.addEventListener('click', function() {
        textIndex = (textIndex + 1) % textVariants.length;
        demoText.textContent = textVariants[textIndex];
        demoText.classList.add('text-shake');
        
        setTimeout(() => {
            demoText.classList.remove('text-shake');
        }, 500);
        
        console.log('–¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', textVariants[textIndex]);
    });
    
    // –°–∫—Ä—ã—Ç–∏–µ/–ø–æ–∫–∞–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
    hideBtn.addEventListener('click', function() {
        if (demoText.classList.contains('hidden')) {
            demoText.classList.remove('hidden');
            hideBtn.textContent = '–°–∫—Ä—ã—Ç—å';
        } else {
            demoText.classList.add('hidden');
            hideBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å';
        }
        
        console.log('–≠–ª–µ–º–µ–Ω—Ç —Å–∫—Ä—ã—Ç/–ø–æ–∫–∞–∑–∞–Ω');
    });
}

// ========== –í–ê–õ–ò–î–ê–¶–ò–Ø –§–û–†–ú–´ ==========

function initFormValidation() {
    const form = document.getElementById('demoForm');
    const nameInput = document.getElementById('name');
    const emailInput = document.getElementById('email');
    const nameError = document.getElementById('nameError');
    const emailError = document.getElementById('emailError');
    const formResult = document.getElementById('formResult');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    nameInput.addEventListener('input', function() {
        validateName();
    });
    
    emailInput.addEventListener('input', function() {
        validateEmail();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const isNameValid = validateName();
        const isEmailValid = validateEmail();
        
        if (isNameValid && isEmailValid) {
            showFormSuccess();
        } else {
            showFormError();
        }
    });
    
    function validateName() {
        const name = nameInput.value.trim();
        if (name.length < 2) {
            showFieldError(nameInput, nameError, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return false;
        } else {
            clearFieldError(nameInput, nameError);
            return true;
        }
    }
    
    function validateEmail() {
        const email = emailInput.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!email) {
            showFieldError(emailInput, emailError, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
            return false;
        } else if (!emailRegex.test(email)) {
            showFieldError(emailInput, emailError, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            return false;
        } else {
            clearFieldError(emailInput, emailError);
            return true;
        }
    }
    
    function showFieldError(input, errorElement, message) {
        input.classList.add('error');
        errorElement.textContent = message;
    }
    
    function clearFieldError(input, errorElement) {
        input.classList.remove('error');
        errorElement.textContent = '';
    }
    
    function showFormSuccess() {
        formResult.className = 'form-result success';
        formResult.textContent = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${nameInput.value}! –§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.`;
        form.reset();
        console.log('–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
    }
    
    function showFormError() {
        formResult.className = 'form-result error';
        formResult.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ';
        console.log('–û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ');
    }
}

// ========== –ê–ù–ò–ú–ê–¶–ò–ò ==========

function initAnimationDemo() {
    const animateBtn = document.getElementById('animateBtn');
    const animatedBox = document.getElementById('animatedBox');
    
    animateBtn.addEventListener('click', function() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        animatedBox.classList.add('animate');
        
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            animatedBox.classList.remove('animate');
        }, 1000);
        
        console.log('–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞');
    });
}

// ========== –°–ü–ò–°–û–ö –ó–ê–î–ê–ß ==========

function initTodoList() {
    const todoInput = document.getElementById('todoInput');
    const addTodoBtn = document.getElementById('addTodoBtn');
    const todoList = document.getElementById('todoList');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –∫–Ω–æ–ø–∫–µ
    addTodoBtn.addEventListener('click', addTodo);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ Enter
    todoInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            addTodo();
        }
    });
    
    function addTodo() {
        const text = todoInput.value.trim();
        if (text) {
            createTodoItem(text);
            todoInput.value = '';
            console.log('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', text);
        }
    }
    
    function createTodoItem(text) {
        const li = document.createElement('li');
        li.className = 'todo-item';
        
        li.innerHTML = `
            <span>${text}</span>
            <button onclick="removeTodo(this)">–£–¥–∞–ª–∏—Ç—å</button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        li.addEventListener('click', function(e) {
            if (e.target.tagName !== 'BUTTON') {
                toggleTodoComplete(li);
            }
        });
        
        todoList.appendChild(li);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        li.style.opacity = '0';
        li.style.transform = 'translateX(-20px)';
        setTimeout(() => {
            li.style.transition = 'all 0.3s ease';
            li.style.opacity = '1';
            li.style.transform = 'translateX(0)';
        }, 10);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–ª—è onclick)
    window.removeTodo = function(button) {
        const li = button.parentElement;
        li.style.transition = 'all 0.3s ease';
        li.style.opacity = '0';
        li.style.transform = 'translateX(20px)';
        
        setTimeout(() => {
            li.remove();
        }, 300);
        
        console.log('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
    };
    
    function toggleTodoComplete(li) {
        li.classList.toggle('completed');
        const isCompleted = li.classList.contains('completed');
        console.log('–ó–∞–¥–∞—á–∞', isCompleted ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
    }
}

// ========== –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ==========

function initModal() {
    const modalBtn = document.getElementById('modalBtn');
    const modal = document.getElementById('modal');
    const closeBtn = document.querySelector('.close');
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modalBtn.addEventListener('click', function() {
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    closeBtn.addEventListener('click', closeModal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeModal();
        }
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && modal.style.display === 'block') {
            closeModal();
        }
    });
    
    function closeModal() {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto'; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        console.log('–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ==========

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? '#48bb78' : type === 'error' ? '#e53e3e' : '#667eea'};
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        z-index: 1001;
        animation: slideInRight 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const style = document.createElement('style');
style.textContent = `
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
`;
document.head.appendChild(style);

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å localStorage
function saveToLocalStorage(key, data) {
    try {
        localStorage.setItem(key, JSON.stringify(data));
        console.log('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', key);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
    }
}

function loadFromLocalStorage(key) {
    try {
        const data = localStorage.getItem(key);
        return data ? JSON.parse(data) : null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
        return null;
    }
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
function saveTodos() {
    const todos = Array.from(document.querySelectorAll('.todo-item')).map(item => ({
        text: item.querySelector('span').textContent,
        completed: item.classList.contains('completed')
    }));
    saveToLocalStorage('todos', todos);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
function loadTodos() {
    const savedTodos = loadFromLocalStorage('todos');
    if (savedTodos) {
        savedTodos.forEach(todo => {
            const li = document.createElement('li');
            li.className = `todo-item ${todo.completed ? 'completed' : ''}`;
            li.innerHTML = `
                <span>${todo.text}</span>
                <button onclick="removeTodo(this)">–£–¥–∞–ª–∏—Ç—å</button>
            `;
            li.addEventListener('click', function(e) {
                if (e.target.tagName !== 'BUTTON') {
                    toggleTodoComplete(li);
                }
            });
            document.getElementById('todoList').appendChild(li);
        });
        console.log('–ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage');
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadTodos();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    const todoList = document.getElementById('todoList');
    if (todoList) {
        const observer = new MutationObserver(saveTodos);
        observer.observe(todoList, { childList: true, subtree: true, attributes: true, attributeFilter: ['class'] });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
window.demoFunctions = {
    showNotification,
    saveToLocalStorage,
    loadFromLocalStorage,
    addTodo: function(text) {
        if (text) {
            createTodoItem(text);
        }
    }
};

console.log('–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ JavaScript –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!');
console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window.demoFunctions:', Object.keys(window.demoFunctions));
